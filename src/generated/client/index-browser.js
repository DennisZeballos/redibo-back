
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsuarioScalarFieldEnum = {
  idUsuario: 'idUsuario',
  nombreCompleto: 'nombreCompleto',
  email: 'email',
  contraseña: 'contraseña',
  fechaNacimiento: 'fechaNacimiento',
  telefono: 'telefono',
  registradoCon: 'registradoCon',
  fechaRegistro: 'fechaRegistro',
  verificado: 'verificado',
  host: 'host',
  driverBool: 'driverBool',
  fotoPerfil: 'fotoPerfil',
  codigoVerificacion: 'codigoVerificacion',
  bloqueado: 'bloqueado',
  fechaBloqueado: 'fechaBloqueado',
  intentosFallidos: 'intentosFallidos',
  direccion: 'direccion',
  esAdmin: 'esAdmin',
  edicionesNombre: 'edicionesNombre',
  edicionesFecha: 'edicionesFecha',
  edicionesTelefono: 'edicionesTelefono',
  metodoPago: 'metodoPago',
  numeroTarjeta: 'numeroTarjeta',
  fechaExpiracion: 'fechaExpiracion',
  titular: 'titular',
  imagenQr: 'imagenQr',
  detallesMetodoPago: 'detallesMetodoPago'
};

exports.Prisma.VerificacionesScalarFieldEnum = {
  idCodigo: 'idCodigo',
  idUsuario: 'idUsuario',
  codigo: 'codigo',
  tipo: 'tipo',
  creadoEn: 'creadoEn',
  expiracion: 'expiracion',
  usado: 'usado'
};

exports.Prisma.TerminosCondicionesScalarFieldEnum = {
  idAceptacion: 'idAceptacion',
  idUsuario: 'idUsuario',
  versionTerminos: 'versionTerminos',
  fechaAceptacion: 'fechaAceptacion'
};

exports.Prisma.DriverScalarFieldEnum = {
  idDriver: 'idDriver',
  idUsuario: 'idUsuario',
  sexo: 'sexo',
  telefono: 'telefono',
  licencia: 'licencia',
  fechaEmision: 'fechaEmision',
  fechaExpiracion: 'fechaExpiracion',
  tipoLicencia: 'tipoLicencia',
  añosExperiencia: 'añosExperiencia',
  disponible: 'disponible',
  anversoUrl: 'anversoUrl',
  reversoUrl: 'reversoUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsuarioDriverScalarFieldEnum = {
  id: 'id',
  idUsuario: 'idUsuario',
  idDriver: 'idDriver',
  fechaAsignacion: 'fechaAsignacion'
};

exports.Prisma.NotificacionScalarFieldEnum = {
  idNotificacion: 'idNotificacion',
  idUsuario: 'idUsuario',
  titulo: 'titulo',
  mensaje: 'mensaje',
  idEntidad: 'idEntidad',
  tipoEntidad: 'tipoEntidad',
  leido: 'leido',
  leidoEn: 'leidoEn',
  creadoEn: 'creadoEn',
  actualizadoEn: 'actualizadoEn',
  haSidoBorrada: 'haSidoBorrada',
  tipo: 'tipo',
  prioridad: 'prioridad'
};

exports.Prisma.UbicacionScalarFieldEnum = {
  idUbicacion: 'idUbicacion',
  departamento: 'departamento',
  nombre: 'nombre',
  descripcion: 'descripcion',
  latitud: 'latitud',
  longitud: 'longitud',
  esActiva: 'esActiva'
};

exports.Prisma.AutoScalarFieldEnum = {
  idAuto: 'idAuto',
  idPropietario: 'idPropietario',
  idUbicacion: 'idUbicacion',
  marca: 'marca',
  modelo: 'modelo',
  descripcion: 'descripcion',
  precioRentaDiario: 'precioRentaDiario',
  montoGarantia: 'montoGarantia',
  kilometraje: 'kilometraje',
  calificacionPromedio: 'calificacionPromedio',
  totalComentarios: 'totalComentarios',
  tipo: 'tipo',
  año: 'año',
  placa: 'placa',
  soat: 'soat',
  color: 'color',
  estado: 'estado',
  fechaAdquisicion: 'fechaAdquisicion',
  asientos: 'asientos',
  capacidadMaletero: 'capacidadMaletero',
  transmision: 'transmision',
  combustible: 'combustible',
  diasTotalRenta: 'diasTotalRenta',
  vecesAlquilado: 'vecesAlquilado'
};

exports.Prisma.ImagenScalarFieldEnum = {
  idImagen: 'idImagen',
  idAuto: 'idAuto',
  direccionImagen: 'direccionImagen'
};

exports.Prisma.DisponibilidadScalarFieldEnum = {
  idDisponibilidad: 'idDisponibilidad',
  idAuto: 'idAuto',
  fechaInicio: 'fechaInicio',
  fechaFin: 'fechaFin',
  motivo: 'motivo',
  descripcion: 'descripcion'
};

exports.Prisma.ReservaScalarFieldEnum = {
  idReserva: 'idReserva',
  fechaInicio: 'fechaInicio',
  fechaFin: 'fechaFin',
  idAuto: 'idAuto',
  idCliente: 'idCliente',
  estado: 'estado',
  fechaSolicitud: 'fechaSolicitud',
  fechaAprobacion: 'fechaAprobacion',
  fechaLimitePago: 'fechaLimitePago',
  montoTotal: 'montoTotal',
  kilometrajeInicial: 'kilometrajeInicial',
  kilometrajeFinal: 'kilometrajeFinal',
  estaPagada: 'estaPagada'
};

exports.Prisma.PagoScalarFieldEnum = {
  idPago: 'idPago',
  idReserva: 'idReserva',
  monto: 'monto',
  fechaPago: 'fechaPago',
  metodoPago: 'metodoPago',
  referencia: 'referencia',
  comprobante: 'comprobante',
  tipo: 'tipo'
};

exports.Prisma.GarantiaScalarFieldEnum = {
  idGarantia: 'idGarantia',
  idReserva: 'idReserva',
  monto: 'monto',
  fechaDeposito: 'fechaDeposito',
  fechaLiberacion: 'fechaLiberacion',
  estado: 'estado',
  comprobante: 'comprobante'
};

exports.Prisma.HistorialMantenimientoScalarFieldEnum = {
  idHistorial: 'idHistorial',
  idAuto: 'idAuto',
  fechaInicio: 'fechaInicio',
  fechaFin: 'fechaFin',
  descripcion: 'descripcion',
  costo: 'costo',
  tipoMantenimiento: 'tipoMantenimiento',
  kilometraje: 'kilometraje'
};

exports.Prisma.ComentarioScalarFieldEnum = {
  idComentario: 'idComentario',
  idAuto: 'idAuto',
  idUsuario: 'idUsuario',
  contenido: 'contenido',
  calificacion: 'calificacion',
  fechaCreacion: 'fechaCreacion',
  idReserva: 'idReserva'
};

exports.Prisma.CalificacionUsuarioScalarFieldEnum = {
  idCalificacion: 'idCalificacion',
  idCalificador: 'idCalificador',
  idCalificado: 'idCalificado',
  puntuacion: 'puntuacion',
  comentario: 'comentario',
  fechaCreacion: 'fechaCreacion',
  idReserva: 'idReserva',
  tipoCalificacion: 'tipoCalificacion'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.RegistradoCon = exports.$Enums.RegistradoCon = {
  email: 'email',
  google: 'google'
};

exports.MetodoPago = exports.$Enums.MetodoPago = {
  QR: 'QR',
  TARJETA_DEBITO: 'TARJETA_DEBITO',
  EFECTIVO: 'EFECTIVO'
};

exports.TipoVerificacion = exports.$Enums.TipoVerificacion = {
  recuperacion: 'recuperacion',
  verificacion: 'verificacion'
};

exports.TipoDeNotificacion = exports.$Enums.TipoDeNotificacion = {
  RESERVA_SOLICITADA: 'RESERVA_SOLICITADA',
  RESERVA_APROBADA: 'RESERVA_APROBADA',
  RESERVA_RECHAZADA: 'RESERVA_RECHAZADA',
  DEPOSITO_CONFIRMADO: 'DEPOSITO_CONFIRMADO',
  DEPOSITO_RECIBIDO: 'DEPOSITO_RECIBIDO',
  RESERVA_CANCELADA: 'RESERVA_CANCELADA',
  ALQUILER_FINALIZADO: 'ALQUILER_FINALIZADO',
  RESERVA_MODIFICADA: 'RESERVA_MODIFICADA',
  VEHICULO_CALIFICADO: 'VEHICULO_CALIFICADO'
};

exports.PrioridadNotificacion = exports.$Enums.PrioridadNotificacion = {
  BAJA: 'BAJA',
  MEDIA: 'MEDIA',
  ALTA: 'ALTA'
};

exports.EstadoAuto = exports.$Enums.EstadoAuto = {
  ACTIVO: 'ACTIVO',
  INACTIVO: 'INACTIVO'
};

exports.Transmision = exports.$Enums.Transmision = {
  AUTOMATICO: 'AUTOMATICO',
  MANUAL: 'MANUAL'
};

exports.Combustible = exports.$Enums.Combustible = {
  GASOLINA: 'GASOLINA',
  DIESEL: 'DIESEL',
  ELECTRICO: 'ELECTRICO',
  HIBRIDO: 'HIBRIDO',
  GAS: 'GAS'
};

exports.MotivoNoDisponibilidad = exports.$Enums.MotivoNoDisponibilidad = {
  MANTENIMIENTO: 'MANTENIMIENTO',
  REPARACION: 'REPARACION',
  USO_PERSONAL: 'USO_PERSONAL',
  OTRO: 'OTRO'
};

exports.EstadoReserva = exports.$Enums.EstadoReserva = {
  SOLICITADA: 'SOLICITADA',
  APROBADA: 'APROBADA',
  RECHAZADA: 'RECHAZADA',
  CONFIRMADA: 'CONFIRMADA',
  CANCELADA: 'CANCELADA',
  EN_CURSO: 'EN_CURSO',
  FINALIZADA: 'FINALIZADA'
};

exports.TipoPago = exports.$Enums.TipoPago = {
  RENTA: 'RENTA',
  GARANTIA: 'GARANTIA'
};

exports.EstadoGarantia = exports.$Enums.EstadoGarantia = {
  DEPOSITADA: 'DEPOSITADA',
  LIBERADA: 'LIBERADA',
  RETENIDA: 'RETENIDA'
};

exports.TipoMantenimiento = exports.$Enums.TipoMantenimiento = {
  PREVENTIVO: 'PREVENTIVO',
  CORRECTIVO: 'CORRECTIVO',
  REVISION: 'REVISION'
};

exports.TipoCalificacionUsuario = exports.$Enums.TipoCalificacionUsuario = {
  ARRENDADOR: 'ARRENDADOR',
  ARRENDATARIO: 'ARRENDATARIO'
};

exports.Prisma.ModelName = {
  Usuario: 'Usuario',
  Verificaciones: 'Verificaciones',
  TerminosCondiciones: 'TerminosCondiciones',
  Driver: 'Driver',
  UsuarioDriver: 'UsuarioDriver',
  Notificacion: 'Notificacion',
  Ubicacion: 'Ubicacion',
  Auto: 'Auto',
  Imagen: 'Imagen',
  Disponibilidad: 'Disponibilidad',
  Reserva: 'Reserva',
  Pago: 'Pago',
  Garantia: 'Garantia',
  HistorialMantenimiento: 'HistorialMantenimiento',
  Comentario: 'Comentario',
  CalificacionUsuario: 'CalificacionUsuario'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
